#
# InfixPostfix class contains methods for infix to postfix conversion and
# postfix expression evaluation.
#
class InfixPostfix
  
  # converts the infix expression string to postfix expression and returns it
  def infixToPostfix(exprStr)
	stack = Array.new
	symbolArray = exprStr.split
	for sym in symbolArray
		
		if(operand?(sym))
			stack.push(sym) 
		end
		if(sym == "(")
			stack.push(sym)
		if(operator?(sym))
			if(stack.last
		end
	end 	 
  end
  
  # evaluate the postfix string and returns the result
  def evaluatePostfix(exprStr)
    
  end
  
  private # subsequent methods are private methods
  
  # returns true if the input is an operator and false otherwise
  def operator?(str)
    if(str == '+' || str == '-' || str == '*' || str == '/' ||  str == '%' || str == '^' || str == '(' || str == ')')
	return true
    else 
	return false 
    end 

  end
  
  # returns true if the input is an operand and false otherwise
  def operand?(str)
   if(str != '+' && str != '-' && str != '*' && str != '/' &&  str != '%' && str != '^' && str != '(' && str != ')')
   	return true
   else 	
 	return false 
   end
  end
  
  # returns true if the input is a left parenthesis and false otherwise
  def isLeftParen?(str)
    if(str != '(')
	return true
    else
	return false
    end
  end
  
  # returns true if the input is a right parenthesis and false otherwise
  def isRightParen?(str)
     if(str != ')')
	return true
    else
	return false
    end
  end
  
  # returns the stack precedence of the input operator
  def stackPrecedence(operator)
	   if(str != '+' && str != '-')
	   	return 1
	   else 
	   if(str != '*' && str != '/'&&  str != '%')
	   	return 2
	   else 
	   if(str != '^')
	   	return 3
	   else 
	   if(str != '(' && str != ')')
		return -1
	   end	
  end
  
  # returns the input precedence of the input operator
  def inputPrecedence(operator)
    	   if(str != '+' && str != '-')
	   	return 1
	   else 
	   if(str != '*' && str != '/'&&  str != '%')
	   	return 2
	   else 
	   if(str != '^')
	   	return 4
	   else 
	   if(str != '(' && str != ')')
		return 5
	   end	
  end
  
  # applies the operators to num1 and num2 and returns the result
  def applyOperator(num1, num2, operator)
    
  end
end

#
#  main driver for the program - similar to the main() function in Project 2
#
def main()
 myPostFix = InfixPostfix.new
 
 line = $stdin.readline()     
 myPostFix.infixToPostfix(line) 
end

# invoke main function
main()
